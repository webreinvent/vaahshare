{"version":3,"file":"index.js","sources":["../../electron/main/index.js"],"sourcesContent":["import {app, BrowserWindow, ContextBridge, shell,\n  ipcMain, screen, desktopCapturer, ipcRenderer} from 'electron';\nimport { release } from 'node:os';\nimport { join } from 'node:path';\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, '..');\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist');\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST;\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit();\n  process.exit(0);\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win = null;\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js');\nconst url = process.env.VITE_DEV_SERVER_URL;\nconst indexHtml = join(process.env.DIST, 'index.html');\n\n\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: join(process.env.PUBLIC, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    // electron-vite-vue#298\n    win.loadURL(url);\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools();\n  } else {\n    win.loadFile(indexHtml);\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString());\n  });\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url);\n    return { action: 'deny' };\n  });\n\n\n\n}\n\n\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () => {\n  win = null;\n  if (process.platform !== 'darwin') app.quit();\n});\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore();\n    win.focus();\n  }\n});\n\napp.on('activate', () => {\n\n\n\n  const allWindows = BrowserWindow.getAllWindows();\n  if (allWindows.length) {\n    allWindows[0].focus();\n  } else {\n    createWindow();\n  }\n});\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`);\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg });\n  }\n});\n\n\nipcMain.on('vaah-capture-screenshot', async (event) => {\n\n  console.log(\"ipc\");\n\n  /*const screenShotInfo = await captureScreen();\n  const dataURL = screenShotInfo.toDataURL();\n  event.sender.send('screenshot-captured', dataURL);*/\n});\n"],"names":["join","release","app","BrowserWindow","url","shell","ipcMain"],"mappings":";;;;AAeA,QAAQ,IAAI,gBAAgBA,UAAI,KAAC,WAAW,IAAI;AAChD,QAAQ,IAAI,OAAOA,UAAI,KAAC,QAAQ,IAAI,eAAe,SAAS;AAC5D,QAAQ,IAAI,SAAS,QAAQ,IAAI,sBAC7BA,UAAAA,KAAK,QAAQ,IAAI,eAAe,WAAW,IAC3C,QAAQ,IAAI;AAGhB,IAAIC,QAAO,QAAA,EAAG,WAAW,KAAK;AAAGC,WAAG,IAAC,4BAA2B;AAGhE,IAAI,QAAQ,aAAa;AAASA,WAAAA,IAAI,kBAAkBA,SAAG,IAAC,QAAO,CAAE;AAErE,IAAI,CAACA,SAAAA,IAAI,6BAA6B;AACpCA,WAAG,IAAC,KAAI;AACR,UAAQ,KAAK,CAAC;AAChB;AAOA,IAAI,MAAM;AAEV,MAAM,UAAUF,UAAI,KAAC,WAAW,qBAAqB;AACrD,MAAM,MAAM,QAAQ,IAAI;AACxB,MAAM,YAAYA,UAAI,KAAC,QAAQ,IAAI,MAAM,YAAY;AAIrD,eAAe,eAAe;AAC5B,QAAM,IAAIG,SAAAA,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,MAAMH,UAAAA,KAAK,QAAQ,IAAI,QAAQ,aAAa;AAAA,IAC5C,gBAAgB;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB;AAAA,EACL,CAAG;AAED,MAAI,QAAQ,IAAI,qBAAqB;AAEnC,QAAI,QAAQ,GAAG;AAEf,QAAI,YAAY;EACpB,OAAS;AACL,QAAI,SAAS,SAAS;AAAA,EACvB;AAGD,MAAI,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,yBAAwB,oBAAI,KAAM,GAAC,eAAc;AAAA,EAC3E,CAAG;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAI,KAAG,MAAO;AAChD,QAAIA,KAAI,WAAW,QAAQ;AAAGC,eAAAA,MAAM,aAAaD,IAAG;AACpD,WAAO,EAAE,QAAQ;EACrB,CAAG;AAIH;AAIAF,SAAG,IAAC,UAAW,EAAC,KAAK,YAAY;AAEjCA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AAChC,QAAM;AACN,MAAI,QAAQ,aAAa;AAAUA,aAAG,IAAC,KAAI;AAC7C,CAAC;AAEDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,KAAK;AAEP,QAAI,IAAI,YAAW;AAAI,UAAI,QAAO;AAClC,QAAI,MAAK;AAAA,EACV;AACH,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AAIvB,QAAM,aAAaC,uBAAc;AACjC,MAAI,WAAW,QAAQ;AACrB,eAAW,CAAC,EAAE;EAClB,OAAS;AACL;EACD;AACH,CAAC;AAGDG,SAAO,QAAC,OAAO,YAAY,CAAC,GAAG,QAAQ;AACrC,QAAM,cAAc,IAAIH,uBAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB;AAAA,EACL,CAAG;AAED,MAAI,QAAQ,IAAI,qBAAqB;AACnC,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EACvC,OAAS;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAK,CAAA;AAAA,EAC9C;AACH,CAAC;AAGDG,SAAAA,QAAQ,GAAG,2BAA2B,OAAO,UAAU;AAErD,UAAQ,IAAI,KAAK;AAKnB,CAAC;"}